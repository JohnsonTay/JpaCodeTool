package ${packagePrefix}.domain;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;
import javax.persistence.Transient;
import javax.persistence.Entity;
import javax.persistence.Table;
#if($pkResult.size()>1)
import javax.persistence.EmbeddedId;
#else
import javax.persistence.SequenceGenerator;
#end

#set ($TABLE_NAME = $tableName )

/**
* @ Filename ${className}.java
* @ Description
* <li>@author: ${author}</li>
* <li>Date: ${date}</li>
* <li>Version: 1.0</li>
* <li>Content: create</li>
*/
@Entity
@Table(name = "$TABLE_NAME")
public class ${className} {

     #if($pkResult.size()!=1)
	     @EmbeddedId
	     private PK  pk = new PK();
     #else
        // ${comments}
		@Id
		@GeneratedValue(strategy=GenerationType.IDENTITY)
		@Column(name = "$keyVar"  )
	     private ${keyType}  ${keyVar} ;

     #end
    #foreach($prop in $columnResult)
    	#if($pkResult.size()!=1)
    		@Column(name = "$prop.name", length = ${prop.length}, nullable = ${prop.nullable})
    	#end
		// "$prop.comments"
		@Column(name = "$prop.name", length = ${prop.length}, nullable = ${prop.nullable})
    	private ${prop.dataType}  ${prop.javaName} ;

     #end

	#foreach($prop in $pkResult)
		public ${prop.dataType}  ${prop.getterMethod}  () {
			#if($pkResult.size()>1)
				return pk.${prop.javaName};
			#else
				return this.${prop.javaName};
			#end
		}
	#end

    #foreach($prop in $columnResult)
        #if(${prop.javaName}=="version")
            @Version
        #end
		public ${prop.dataType}  ${prop.getterMethod}  () {
			return ${prop.javaName};
		}
	#end

	#foreach($prop in $pkResult)
		public void ${prop.setterMethod} (${prop.dataType}  ${prop.javaName}) {
			#if($pkResult.size()>1)
				this.pk.${prop.javaName} = ${prop.javaName};
			#else
				this.${prop.javaName} = ${prop.javaName};
			#end

		}
	#end

    #foreach($prop in $columnResult)
        public void ${prop.setterMethod} (${prop.dataType}  ${prop.javaName}) {
			this.${prop.javaName} = ${prop.javaName};
		 }
	#end

	#if($pkResult.size()>1)
	     @Embeddable
			public static class PK implements Serializable {
				#foreach($prop in $pkResult)
					@Column(name = "${prop.name}" )
					private ${prop.dataType}  ${prop.javaName} ;
				#end
			}
	#end

}